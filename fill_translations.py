#!/usr/bin/env python3
"""
F√ºlle die .po-Dateien mit echten √úbersetzungen
"""

import os
import struct
from pathlib import Path

# √úbersetzungsmap f√ºr alle Sprachen
TRANSLATIONS = {
    # Deutsche Originaltexte -> √úbersetzungen
    "Startseite": {
        "en": "Home",
        "tr": "Ana Sayfa",
        "ru": "–ì–ª–∞–≤–Ω–∞—è"
    },
    "Leistungen": {
        "en": "Services",
        "tr": "Hizmetler",
        "ru": "–£—Å–ª—É–≥–∏"
    },
    "Portfolio": {
        "en": "Portfolio",
        "tr": "Portf√∂y",
        "ru": "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"
    },
    "√úber uns": {
        "en": "About Us",
        "tr": "Hakkƒ±mƒ±zda",
        "ru": "–û –Ω–∞—Å"
    },
    "Kalkulator": {
        "en": "Calculator",
        "tr": "Hesap Makinesi",
        "ru": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
    },
    "Kontakt": {
        "en": "Contact",
        "tr": "ƒ∞leti≈üim",
        "ru": "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
    },
    "Navigation umschalten": {
        "en": "Toggle navigation",
        "tr": "Gezinmeyi deƒüi≈ütir",
        "ru": "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é"
    },
    "NovaHaus - Ihr Partner f√ºr Renovierung": {
        "en": "NovaHaus - Your Partner for Renovation",
        "tr": "NovaHaus - Renovasyon Ortaƒüƒ±nƒ±z",
        "ru": "NovaHaus - –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ —Ä–µ–º–æ–Ω—Ç—É"
    },
    "Ihr zuverl√§ssiger Partner f√ºr professionelle Renovierung und Sanierung in K√∂ln und Hamburg.": {
        "en": "Your reliable partner for professional renovation and refurbishment in Cologne and Hamburg.",
        "tr": "K√∂ln ve Hamburg'da profesyonel renovasyon ve restorasyon i√ßin g√ºvenilir ortaƒüƒ±nƒ±z.",
        "ru": "–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–º–æ–Ω—Ç—É –∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –≤ –ö—ë–ª—å–Ω–µ –∏ –ì–∞–º–±—É—Ä–≥–µ."
    },
    "Navigation": {
        "en": "Navigation",
        "tr": "Navigasyon",
        "ru": "–ù–∞–≤–∏–≥–∞—Ü–∏—è"
    },
    "Komplettrenovierung": {
        "en": "Complete Renovation",
        "tr": "Tam Renovasyon",
        "ru": "–ü–æ–ª–Ω—ã–π —Ä–µ–º–æ–Ω—Ç"
    },
    "Badezimmersanierung": {
        "en": "Bathroom Renovation",
        "tr": "Banyo Renovasyonu",
        "ru": "–†–µ–º–æ–Ω—Ç –≤–∞–Ω–Ω–æ–π"
    },
    "Fassadenreinigung": {
        "en": "Facade Cleaning",
        "tr": "Cephe Temizliƒüi",
        "ru": "–û—á–∏—Å—Ç–∫–∞ —Ñ–∞—Å–∞–¥–æ–≤"
    },
    "Kostenrechner": {
        "en": "Cost Calculator",
        "tr": "Maliyet Hesaplayƒ±cƒ±sƒ±",
        "ru": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
    },
    "Alle Rechte vorbehalten.": {
        "en": "All rights reserved.",
        "tr": "T√ºm haklarƒ± saklƒ±dƒ±r.",
        "ru": "–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã."
    },
    "Datenschutz": {
        "en": "Privacy",
        "tr": "Gizlilik",
        "ru": "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
    },
    "Impressum": {
        "en": "Imprint",
        "tr": "K√ºnye",
        "ru": "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    },
    "K√∂ln & Hamburg": {
        "en": "Cologne & Hamburg",
        "tr": "K√∂ln & Hamburg",
        "ru": "–ö—ë–ª—å–Ω –∏ –ì–∞–º–±—É—Ä–≥"
    }
}


def create_po_file(language, translations):
    """Erstelle eine .po-Datei mit √úbersetzungen"""

    # Header f√ºr .po-Datei
    header = f'''# LANGUAGE translation for NovaHaus
# Copyright (C) 2024
# This file is distributed under the same license as the NovaHaus package.
#
msgid ""
msgstr ""
"Project-Id-Version: NovaHaus 1.0\\n"
"Language: {language}\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"

'''

    # √úbersetzungseintr√§ge hinzuf√ºgen
    entries = []
    for german_text, translations_dict in translations.items():
        if language in translations_dict:
            translated_text = translations_dict[language]
            entry = f'''msgid "{german_text}"
msgstr "{translated_text}"

'''
            entries.append(entry)

    return header + ''.join(entries)


def create_mo_file(translations, mo_file_path):
    """Erstelle eine .mo-Datei aus √úbersetzungen"""

    # Filtere leere √úbersetzungen und erstelle Items
    items = [(k, v) for k, v in translations.items() if k and v and k != v]

    if not items:
        # Leere .mo-Datei f√ºr fehlende √úbersetzungen
        items = [('', '')]

    # MO-Datei Struktur erstellen
    keys = [k.encode('utf-8') for k, v in items]
    values = [v.encode('utf-8') for k, v in items]

    # Offsets berechnen
    koffsets = []
    voffsets = []

    # Header ist 28 bytes + 8 bytes pro String-Paar * 2
    offset = 28 + len(items) * 16

    for key in keys:
        koffsets.append(offset)
        offset += len(key)

    for value in values:
        voffsets.append(offset)
        offset += len(value)

    # .mo-Datei schreiben
    mo_file_path.parent.mkdir(parents=True, exist_ok=True)

    with open(mo_file_path, 'wb') as f:
        # Header
        f.write(struct.pack('<I', 0x950412de))  # Magic number
        f.write(struct.pack('<I', 0))  # Version
        f.write(struct.pack('<I', len(items)))  # Number of entries
        f.write(struct.pack('<I', 28))  # Offset of key table
        f.write(struct.pack('<I', 28 + len(items) * 8))  # Offset of value table
        f.write(struct.pack('<I', 0))  # Hash table size
        f.write(struct.pack('<I', 0))  # Offset of hash table

        # Key table
        for i, key in enumerate(keys):
            f.write(struct.pack('<I', len(key)))  # Key length
            f.write(struct.pack('<I', koffsets[i]))  # Key offset

        # Value table
        for i, value in enumerate(values):
            f.write(struct.pack('<I', len(value)))  # Value length
            f.write(struct.pack('<I', voffsets[i]))  # Value offset

        # Key strings
        for key in keys:
            f.write(key)

        # Value strings
        for value in values:
            f.write(value)


def main():
    """Hauptfunktion - Erstelle alle √úbersetzungsdateien"""

    print("üåç Erstelle √úbersetzungsdateien...")

    base_dir = Path(__file__).parent
    locale_dir = base_dir / 'locale'

    # F√ºr jede Sprache Dateien erstellen
    languages = ['en', 'tr', 'ru']

    for lang in languages:
        print(f"\nüìù Erstelle {lang.upper()}-√úbersetzungen...")

        lang_dir = locale_dir / lang / 'LC_MESSAGES'
        lang_dir.mkdir(parents=True, exist_ok=True)

        po_file = lang_dir / 'django.po'
        mo_file = lang_dir / 'django.mo'

        # .po-Datei erstellen
        po_content = create_po_file(lang, TRANSLATIONS)
        with open(po_file, 'w', encoding='utf-8') as f:
            f.write(po_content)
        print(f"   ‚úÖ {po_file} erstellt")

        # √úbersetzungen f√ºr .mo-Datei sammeln
        mo_translations = {}
        for german_text, translations_dict in TRANSLATIONS.items():
            if lang in translations_dict:
                mo_translations[german_text] = translations_dict[lang]

        # .mo-Datei erstellen
        create_mo_file(mo_translations, mo_file)
        print(f"   ‚úÖ {mo_file} erstellt")

    # Deutsche Dateien (leer, da es die Standardsprache ist)
    print(f"\nüìù Erstelle DE-√úbersetzungen (Standard)...")
    de_dir = locale_dir / 'de' / 'LC_MESSAGES'
    de_dir.mkdir(parents=True, exist_ok=True)

    # Leere deutsche .po-Datei
    de_po_content = '''# German (default) translation for NovaHaus
msgid ""
msgstr ""
"Language: de\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"

'''

    with open(de_dir / 'django.po', 'w', encoding='utf-8') as f:
        f.write(de_po_content)

    # Leere deutsche .mo-Datei
    create_mo_file({}, de_dir / 'django.mo')
    print(f"   ‚úÖ Deutsche Dateien erstellt")

    print("\nüéØ FERTIG! Alle √úbersetzungen erstellt.")
    print("\nüîÑ Starten Sie den Django-Server neu:")
    print("   python manage.py runserver")
    print("\nüåê Testen Sie jetzt den Sprachenwechsler!")


if __name__ == '__main__':
    main()