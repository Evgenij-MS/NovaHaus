from PIL import Image
import os
import argparse
from concurrent.futures import ThreadPoolExecutor


def parse_args():
    parser = argparse.ArgumentParser(description='–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 2.0')
    parser.add_argument('--quality-jpeg', type=int, default=70, help='–ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è JPEG (0-100)')
    parser.add_argument('--quality-webp', type=int, default=80, help='–ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è WebP (0-100)')
    parser.add_argument('--keep-original', action='store_false', help='–ù–µ —É–¥–∞–ª—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
    parser.add_argument('--backup', action='store_true', help='–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤')
    parser.add_argument('--threads', type=int, default=4, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    return parser.parse_args()


def optimize_image(path, quality_jpeg, quality_webp, keep_original, backup_dir):
    try:
        with Image.open(path) as img:
            # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if backup_dir:
                backup_path = os.path.join(backup_dir, os.path.basename(path))
                img.save(backup_path)
                print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            if path.lower().endswith(('.jpg', '.jpeg')):
                img.save(path, quality=quality_jpeg, optimize=True, progressive=True)
                print(f"‚úì –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω JPEG: {path}")
            elif path.lower().endswith('.png'):
                img.save(path, optimize=True, compress_level=9)
                print(f"‚úì –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω PNG: {path}")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP
            webp_path = os.path.splitext(path)[0] + ".webp"
            if not os.path.exists(webp_path):
                img.save(webp_path, format='webp', quality=quality_webp, method=6)
                print(f"‚úì –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ WebP: {webp_path}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if not keep_original and os.path.exists(webp_path):
                os.remove(path)
                print(f"üóë –£–¥–∞–ª—ë–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª: {path}")

    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {path}: {str(e)}")
        return str(e)
    return None


def process_images(arguments):
    image_dir = "static/images/"
    backup_dir = os.path.join(image_dir, "backups") if arguments.backup else None

    if backup_dir and not os.path.exists(backup_dir):
        os.makedirs(backup_dir)

    tasks = []
    for root, _, files in os.walk(image_dir):
        for file in files:
            if file.lower().endswith(('.png', '.jpg', '.jpeg')):
                path = os.path.join(root, file)
                tasks.append(
                    (path, arguments.quality_jpeg, arguments.quality_webp, arguments.keep_original, backup_dir))

    with ThreadPoolExecutor(max_workers=arguments.threads) as executor:
        results = executor.map(lambda p: optimize_image(*p), tasks)

    error_count = sum(1 for res in results if res is not None)
    print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—à–∏–±–æ–∫: {error_count}")


if __name__ == "__main__":
    config = parse_args()
    print("=== –ó–∞–ø—É—Å–∫ Image Optimizer 2.0 ===")
    print(f"‚Ä¢ –ü–æ—Ç–æ–∫–æ–≤: {config.threads}")
    print(f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ JPEG: {config.quality_jpeg}")
    print(f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ WebP: {config.quality_webp}")
    print(f"‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: {'–î–∞' if config.backup else '–ù–µ—Ç'}")
    print(f"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤: {'–ù–µ—Ç' if config.keep_original else '–î–∞'}\n")

    process_images(config)
    print("\n=== –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ===")